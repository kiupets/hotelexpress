{"version":3,"file":"static/js/733.a24bbc11.chunk.js","mappings":"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","sources":["components/FinancialReport/fn2.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n    Paper,\n    Button,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    TextField,\n    Stack,\n    Typography,\n    Snackbar,\n    Alert,\n    CircularProgress,\n    Box,\n    ToggleButton,\n    ToggleButtonGroup,\n    Grid,\n    Divider,\n    Tooltip,\n    IconButton,\n    Chip\n} from '@mui/material';\nimport { DatePicker } from '@mui/x-date-pickers';\nimport { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport CalendarTodayIcon from '@mui/icons-material/CalendarToday';\nimport DateRangeIcon from '@mui/icons-material/DateRange';\nimport EventIcon from '@mui/icons-material/Event';\nimport InfoIcon from '@mui/icons-material/Info';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport moment from 'moment';\nimport axios from '../../utils/axiosConfig';\n\nconst FinancialReport = () => {\n    const [reportType, setReportType] = useState('custom');\n    const [dateRange, setDateRange] = useState({\n        startDate: moment(),\n        endDate: moment()\n    });\n    const [selectedPeriod, setSelectedPeriod] = useState('');\n    const [exportType, setExportType] = useState('detailed');\n    const [loading, setLoading] = useState(false);\n    const [snackbar, setSnackbar] = useState({\n        open: false,\n        message: '',\n        severity: 'success'\n    });\n    const [groupBy, setGroupBy] = useState('none');\n    const [includeDetails, setIncludeDetails] = useState({\n        payments: true,\n        guests: true,\n        room: true,\n        status: true\n    });\n\n    const handlePeriodChange = (period) => {\n        setSelectedPeriod(period);\n        const today = moment();\n\n        switch (period) {\n            case 'today':\n                setDateRange({\n                    startDate: today,\n                    endDate: today\n                });\n                break;\n            case 'yesterday':\n                setDateRange({\n                    startDate: today.clone().subtract(1, 'day'),\n                    endDate: today.clone().subtract(1, 'day')\n                });\n                break;\n            case 'thisWeek':\n                setDateRange({\n                    startDate: today.clone().startOf('week'),\n                    endDate: today\n                });\n                break;\n            case 'lastWeek':\n                setDateRange({\n                    startDate: today.clone().subtract(1, 'week').startOf('week'),\n                    endDate: today.clone().subtract(1, 'week').endOf('week')\n                });\n                break;\n            case 'thisMonth':\n                setDateRange({\n                    startDate: today.clone().startOf('month'),\n                    endDate: today\n                });\n                break;\n            case 'lastMonth':\n                setDateRange({\n                    startDate: today.clone().subtract(1, 'month').startOf('month'),\n                    endDate: today.clone().subtract(1, 'month').endOf('month')\n                });\n                break;\n            case 'lastQuarter':\n                setDateRange({\n                    startDate: today.clone().subtract(3, 'months').startOf('month'),\n                    endDate: today.clone().subtract(1, 'month').endOf('month')\n                });\n                break;\n            case 'thisYear':\n                setDateRange({\n                    startDate: today.clone().startOf('year'),\n                    endDate: today\n                });\n                break;\n            default:\n                break;\n        }\n    };\n\n    const handleDownload = async () => {\n        if (!dateRange.startDate || !dateRange.endDate) {\n            setSnackbar({\n                open: true,\n                message: 'Por favor seleccione un rango de fechas',\n                severity: 'error'\n            });\n            return;\n        }\n\n        setLoading(true);\n        try {\n            const userId = localStorage.getItem('userId');\n            if (!userId) {\n                throw new Error('No se encontró el ID de usuario');\n            }\n\n            const endpoint = `/excel/export-${exportType}`;\n            const response = await axios.get(endpoint, {\n                params: {\n                    userId,\n                    startDate: dateRange.startDate.format('YYYY-MM-DD'),\n                    endDate: dateRange.endDate.format('YYYY-MM-DD'),\n                    reportType,\n                    groupBy,\n                    includeDetails: JSON.stringify(includeDetails)\n                },\n                responseType: 'blob'\n            });\n\n            const url = window.URL.createObjectURL(new Blob([response.data]));\n            const link = document.createElement('a');\n            link.href = url;\n            const fileName = `reporte-${moment().format('YYYY-MM-DD')}-${exportType}.xlsx`;\n            link.setAttribute('download', fileName);\n            document.body.appendChild(link);\n            link.click();\n            link.remove();\n\n            setSnackbar({\n                open: true,\n                message: 'Reporte descargado exitosamente',\n                severity: 'success'\n            });\n        } catch (error) {\n            console.error('Error downloading report:', error);\n            setSnackbar({\n                open: true,\n                message: error.message || 'Error al descargar el reporte',\n                severity: 'error'\n            });\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleReset = () => {\n        setReportType('custom');\n        setDateRange({\n            startDate: moment(),\n            endDate: moment()\n        });\n        setSelectedPeriod('');\n        setExportType('detailed');\n        setGroupBy('none');\n        setIncludeDetails({\n            payments: true,\n            guests: true,\n            room: true,\n            status: true\n        });\n    };\n\n    return (\n        <LocalizationProvider dateAdapter={AdapterMoment}>\n            <Paper sx={{ p: 4, maxWidth: 800, margin: 'auto', mt: 4 }}>\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4 }}>\n                    <Typography variant=\"h5\">\n                        Reporte Financiero de Reservaciones\n                    </Typography>\n                    <Tooltip title=\"Restablecer filtros\">\n                        <IconButton onClick={handleReset} color=\"primary\">\n                            <RefreshIcon />\n                        </IconButton>\n                    </Tooltip>\n                </Box>\n\n                <Stack spacing={4}>\n                    <Box>\n                        <Typography variant=\"subtitle1\" gutterBottom>\n                            Tipo de Reporte\n                        </Typography>\n                        <ToggleButtonGroup\n                            value={exportType}\n                            exclusive\n                            onChange={(e, value) => value && setExportType(value)}\n                            fullWidth\n                        >\n                            <ToggleButton value=\"detailed\">\n                                <Tooltip title=\"Incluye todos los detalles y formato mejorado\">\n                                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                                        <EventIcon />\n                                        Detallado\n                                    </Box>\n                                </Tooltip>\n                            </ToggleButton>\n                            <ToggleButton value=\"simple\">\n                                <Tooltip title=\"Formato básico con información esencial\">\n                                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                                        <CalendarTodayIcon />\n                                        Simple\n                                    </Box>\n                                </Tooltip>\n                            </ToggleButton>\n                        </ToggleButtonGroup>\n                    </Box>\n\n                    <Divider />\n\n                    <Box>\n                        <Typography variant=\"subtitle1\" gutterBottom>\n                            Período\n                        </Typography>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12} md={6}>\n                                <FormControl fullWidth>\n                                    <InputLabel>Período Predefinido</InputLabel>\n                                    <Select\n                                        value={selectedPeriod}\n                                        onChange={(e) => handlePeriodChange(e.target.value)}\n                                        label=\"Período Predefinido\"\n                                    >\n                                        <MenuItem value=\"today\">Hoy</MenuItem>\n                                        <MenuItem value=\"yesterday\">Ayer</MenuItem>\n                                        <MenuItem value=\"thisWeek\">Esta Semana</MenuItem>\n                                        <MenuItem value=\"lastWeek\">Semana Pasada</MenuItem>\n                                        <MenuItem value=\"thisMonth\">Este Mes</MenuItem>\n                                        <MenuItem value=\"lastMonth\">Mes Pasado</MenuItem>\n                                        <MenuItem value=\"lastQuarter\">Último Trimestre</MenuItem>\n                                        <MenuItem value=\"thisYear\">Este Año</MenuItem>\n                                        <MenuItem value=\"custom\">Personalizado</MenuItem>\n                                    </Select>\n                                </FormControl>\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                <FormControl fullWidth>\n                                    <InputLabel>Agrupar por</InputLabel>\n                                    <Select\n                                        value={groupBy}\n                                        onChange={(e) => setGroupBy(e.target.value)}\n                                        label=\"Agrupar por\"\n                                    >\n                                        <MenuItem value=\"none\">Sin agrupación</MenuItem>\n                                        <MenuItem value=\"daily\">Diario</MenuItem>\n                                        <MenuItem value=\"weekly\">Semanal</MenuItem>\n                                        <MenuItem value=\"monthly\">Mensual</MenuItem>\n                                        <MenuItem value=\"room\">Por Habitación</MenuItem>\n                                        <MenuItem value=\"paymentMethod\">Por Método de Pago</MenuItem>\n                                    </Select>\n                                </FormControl>\n                            </Grid>\n                        </Grid>\n\n                        {selectedPeriod === 'custom' && (\n                            <Grid container spacing={2} sx={{ mt: 2 }}>\n                                <Grid item xs={12} md={6}>\n                                    <DatePicker\n                                        label=\"Fecha Inicial\"\n                                        value={dateRange.startDate}\n                                        onChange={(newValue) => setDateRange(prev => ({ ...prev, startDate: newValue }))}\n                                        renderInput={(params) => <TextField {...params} fullWidth />}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <DatePicker\n                                        label=\"Fecha Final\"\n                                        value={dateRange.endDate}\n                                        onChange={(newValue) => setDateRange(prev => ({ ...prev, endDate: newValue }))}\n                                        renderInput={(params) => <TextField {...params} fullWidth />}\n                                        minDate={dateRange.startDate}\n                                    />\n                                </Grid>\n                            </Grid>\n                        )}\n                    </Box>\n\n                    <Divider />\n\n                    <Box>\n                        <Typography variant=\"subtitle1\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                            Detalles a Incluir\n                            <Tooltip title=\"Seleccione la información que desea incluir en el reporte\">\n                                <InfoIcon fontSize=\"small\" color=\"action\" />\n                            </Tooltip>\n                        </Typography>\n                        <Grid container spacing={1}>\n                            {Object.entries(includeDetails).map(([key, value]) => (\n                                <Grid item key={key}>\n                                    <Chip\n                                        label={key === 'payments' ? 'Pagos' :\n                                            key === 'guests' ? 'Huéspedes' :\n                                                key === 'room' ? 'Habitaciones' : 'Estado'}\n                                        color={value ? 'primary' : 'default'}\n                                        onClick={() => setIncludeDetails(prev => ({\n                                            ...prev,\n                                            [key]: !prev[key]\n                                        }))}\n                                        variant={value ? 'filled' : 'outlined'}\n                                    />\n                                </Grid>\n                            ))}\n                        </Grid>\n                    </Box>\n\n                    <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>\n                        <Button\n                            variant=\"contained\"\n                            size=\"large\"\n                            startIcon={loading ? <CircularProgress size={20} /> : <DownloadIcon />}\n                            onClick={handleDownload}\n                            disabled={loading}\n                        >\n                            {loading ? 'Generando reporte...' : 'Descargar Reporte'}\n                        </Button>\n                    </Box>\n                </Stack>\n\n                <Snackbar\n                    open={snackbar.open}\n                    autoHideDuration={6000}\n                    onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}\n                    anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n                >\n                    <Alert\n                        onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}\n                        severity={snackbar.severity}\n                        variant=\"filled\"\n                        sx={{ width: '100%' }}\n                    >\n                        {snackbar.message}\n                    </Alert>\n                </Snackbar>\n            </Paper>\n        </LocalizationProvider>\n    );\n};\n\nexport default FinancialReport;"],"names":["FinancialReport","reportType","setReportType","useState","dateRange","setDateRange","startDate","moment","endDate","selectedPeriod","setSelectedPeriod","exportType","setExportType","loading","setLoading","snackbar","setSnackbar","open","message","severity","groupBy","setGroupBy","includeDetails","setIncludeDetails","payments","guests","room","status","_jsx","LocalizationProvider","dateAdapter","AdapterMoment","children","_jsxs","Paper","sx","p","maxWidth","margin","mt","Box","display","justifyContent","alignItems","mb","Typography","variant","Tooltip","title","IconButton","onClick","handleReset","color","RefreshIcon","Stack","spacing","gutterBottom","ToggleButtonGroup","value","exclusive","onChange","e","fullWidth","ToggleButton","gap","EventIcon","CalendarTodayIcon","Divider","Grid","container","item","xs","md","FormControl","InputLabel","Select","period","today","clone","subtract","startOf","endOf","handlePeriodChange","target","label","MenuItem","DatePicker","newValue","prev","renderInput","params","TextField","minDate","InfoIcon","fontSize","Object","entries","map","_ref","key","Chip","Button","size","startIcon","CircularProgress","DownloadIcon","async","userId","localStorage","getItem","Error","endpoint","concat","response","axios","get","format","JSON","stringify","responseType","url","window","URL","createObjectURL","Blob","data","link","document","createElement","href","fileName","setAttribute","body","appendChild","click","remove","error","console","disabled","Snackbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Alert","width"],"sourceRoot":""}